#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/9c94-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  def nexusSvcRoute = "http://nexus3.gpte-hw-cicd.svc.cluster.local:8081"
  def nexusPublicRoute = "http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com"

  def nexusContainerRegistrySvcRoute = "https://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000"
  def nexusContainerRegistryPublicRoute = "https://nexus3-registry-gpte-hw-cicd.apps.na311.openshift.opentlc.com"
  def nexusContainerRegistryDockerRoute = "docker://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000"

  def sonarQubeSvcRoute = "sonarqube.gpte-hw-cicd.svc.cluster.local:9000"
  def sonarQubePublicRoute = "http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com"

  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '6ff03b8d-8a9a-42d4-afbf-1bf1e10d5e9a', url: 'https://github.com/p-ebot/advdev-homework.git']]])
    }


    // Build the Tasks Service
    dir('openshift-tasks') {
      def version = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = "${version}"
      def devProject  = "9c94-tasks-dev"
      def prodProject = "9c94-tasks-prod"

      // Using Maven build the war file
      stage('Build war') {
        echo "Building version ${devTag}"
        // Execute Maven Build
        sh "${mvnCmd} clean package -DskipTests=true"
      }

      // The next two stages should run in parallel
      stage('Parallel Test and Analysis') {
        parallel 'Unit Tests': {
            // Using Maven run the unit tests
            echo "Running Unit Tests"

            // Execute Unit Tests
            sh "${mvnCmd} test"

            // This next step is optional.
            // It displays the results of tests in the Jenkins Task Overview
            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
          }, 'Code Analysis': {
            // Using Maven to call SonarQube for Code Analysis
            echo "Running Code Analysis"

            // Execute Sonarqube Tests
            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarQubePublicRoute} -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
          }
        failFast: true
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // Publish to Nexus
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusSvcRoute}/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // Build Image, tag Image
        script {
          openshift.withCluster() {
            openshift.withProject("${devProject}") {
              openshift.selector("bc", "tasks").startBuild("--from-file=${nexusSvcRoute}/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war", "--wait=true")
              openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // Deploy to development Project
        // Set Image, Set VERSION
        // Make sure the application is running and ready before proceeding
        // Need to poll
        script {
          // Update the Image on the Development Deployment Config
          openshift.withCluster() {
            openshift.withProject("${devProject}") {
              // OpenShift 4
              // openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${devTag}")

              // For OpenShift 3 use this:
              openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")

              // Update the Config Map which contains the users for the Tasks application
              // (just in case the properties files changed in the latest commit)
              openshift.selector('configmap', 'tasks-config').delete()
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

              // Set environment variable version
              sh "oc set env dc/tasks VERSION='${devTag} (tasks-dev)' -n ${devProject}"

              // Deploy the development application.
              openshift.selector("dc", "tasks").rollout().latest();

              // Wait for application to be deployed
              def dc = openshift.selector("dc", "tasks").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }
              echo "ReplicationControllers for tasks-${dc_version} are ready"
            }
          }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"
        script {
          sh "skopeo copy --src-tls-verify=false \
                          --dest-tls-verify=false \
                          --src-creds openshift:\$(oc whoami -t) \
                          --dest-creds admin:redhat \
                          docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} \
                          docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

          // Tag the built image with the production tag.
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
            }
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // Determine which application is active
        // Set Image, Set VERSION
        // Deploy into the other application
        // Make sure the application is running and ready before proceeding
        echo "Blue/Green Deployment"
        script {
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              if (activeApp == "tasks-green") {
                destApp = "tasks-blue"
              }
              echo "Active Application:      " + activeApp
              echo "Destination Application: " + destApp

              // Update the Image on the Production Deployment Config
              def dc = openshift.selector("dc/${destApp}").object()

              // OpenShift 4
              //  dc.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${prodTag}"
              // OpenShift 3
              dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"

              openshift.apply(dc)

              // Update Config Map in change config files changed in the source
              openshift.selector("configmap", "${destApp}-config").delete()
              def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )

              sh "oc set env dc/${destApp} VERSION='${prodTag} ${destApp}' -n ${prodProject}"

              // Deploy the inactive application.
              openshift.selector("dc", "${destApp}").rollout().latest();

              // Wait for application to be deployed
              def dc_prod = openshift.selector("dc", "${destApp}").object()
              def dc_version = dc_prod.status.latestVersion
              def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
              echo "Waiting for ${destApp} to be ready"
              while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                sleep 5
                rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
              }
            }
          }
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        script {
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              def route = openshift.selector("route/tasks").object()
              route.spec.to.name="${destApp}"
              openshift.apply(route)
            }
          }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
 def matcher = readFile(pom) =~ '<version>(.+)</version>'
 matcher ? matcher[0][1] : null
}
